---
- name: Use the Ansible Vault to retrieve the private key
  set_fact:
    decrypted_ssh_private_key: "{{ lookup('file', ansible_ssh_private_key_file | default('') | vault) }}"
  vars:
    ansible_become: yes
  when: decrypted_ssh_private_key is defined
  
- name: Uninstall old version of Jenkins
  apt:
    name: "{{ jenkins_pkg }}"
    state: absent
  become: true

- name: Ensure the system is up-to-date
  apt:
    update_cache: yes
    upgrade: full
  become: true

- name: Install required packages on ansible master
  apt:
    name: "{{ ansible_pkg }}"
    state: present
  become: true

# Configure Docker 
- name: Configure Docker 
  block:
    - name: Set up Docker repository
      shell: "{{ docker_repo_setup_cmd }}"
      args:
        executable: /bin/bash
      become: true

    - name: Update apt cache after setting up Docker repository
      apt:
        update_cache: yes
      become: true

    - name: Install Docker
      apt:
        name: "{{ docker_pkg }}"
        state: present
      become: true

# Configure Jenkins
- name: Configure Jenkins 
  block:
    - name: Install Jenkins
      shell: "{{ jenkins_repo_setup_cmd }}"
      become: true

    - name: Update apt cache with Jenkins repository
      apt:
        update_cache: yes
      become: true

    - name: Install Jenkins
      apt:
        name: "{{ jenkins_pkg }}"
        state: present
      become: true

# Create user
- name: Create user
  block:
    - name: Ensure the master group exists
      group:
        name: "{{ master_group }}"
        state: present
      become: true

    - name: Create user master
      user:
        name: "{{ master_user }}"
        groups: "{{ master_groups }}"
        shell: "{{ master_shell }}"
        append: true
        createhome: yes
        home: "/home/{{ master_user }}"
      become: true

    - name: Add sudoers configuration for master user
      copy:
        content: "{{ master_sudoers_content }}"
        dest: "{{ master_sudoers_dest }}"
        owner: "{{ sudoers_owner }}"
        group: "{{ sudoers_group }}"
        mode: "{{ sudoers_mode }}"
      become: true

    - name: Ensure the master home directory exists
      file:
        path: "/home/{{ master_user }}"
        state: directory
        owner: "{{ master_user }}"
        group: "{{ master_user }}"
      become: true

    - name: Ensure the SSH directory exists
      file:
        path: "{{ master_ssh_dir }}"
        state: directory
        owner: "{{ master_user }}"
        group: "{{ master_user }}"
      become: true

    - name: Delete existing id_rsa key
      file:
        path: "{{ master_ssh_key }}"
        state: absent
      become: true
      
    - name: Generate SSH Keys for Master
      command: "{{ master_ssh_keygen_cmd }}"
      when: not (lookup('file', '{{ master_ssh_key }}', errors='ignore') | bool)
      become: true
    
    - name: Set ownership and permissions for id_rsa
      file:
        path: "{{ master_ssh_key }}"
        owner: "{{ master_user }}"
        group: "{{ master_user }}"
        mode: "{{ master_ssh_key_mode }}"
      become: true

    - name: Set ownership and permissions for id_rsa.pub
      file:
        path: "{{ master_ssh_pub_key }}"
        owner: "{{ master_user }}"
        group: "{{ master_user }}"
        mode: "{{ master_ssh_pub_key_mode }}"
      become: true

    - name: Distribute master SSH Public Key to Slave Nodes
      authorized_key:
        user: "{{ master_ssh_user }}"
        key: "{{ lookup('file', master_ssh_pub_key) }}"
      become: true
      become_user: "{{ master_ssh_user }}"
      ignore_errors: true
      when: master_ssh_pub_key is defined and not (lookup('file', master_ssh_key, errors='ignore') | bool)

    # Include Jenkins Slave Role
    - name: Include Jenkins Slave Role
      include_role:
        name: jenkins-slave
      vars:
        jenkins_ssh_pub_key: "{{ lookup('file', '{{ master_ssh_pub_key }}') }}"

    - name: Restart Jenkins service
      service:
        name: "{{ jenkins_svc_name }}"
        state: restarted
      become: true
      ignore_errors: true
